{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"EX-百度云盘去加载提示版","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://pan.baidu.com/disk/home*","*://yun.baidu.com/disk/home*","*://pan.baidu.com/s/*","*://yun.baidu.com/s/*","*://pan.baidu.com/share/link?*","*://yun.baidu.com/share/link?*","*://eyun.baidu.com/s/*","*://eyun.baidu.com/enterprise/*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1530109317160},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/39854-ex-%E7%99%BE%E5%BA%A6%E4%BA%91%E7%9B%98%E5%8E%BB%E5%8A%A0%E8%BD%BD%E6%8F%90%E7%A4%BA%E7%89%88/code/EX-%E7%99%BE%E5%BA%A6%E4%BA%91%E7%9B%98%E5%8E%BB%E5%8A%A0%E8%BD%BD%E6%8F%90%E7%A4%BA%E7%89%88.user.js","uuid":"787ce47c-7012-448e-abfa-4934629871bc","source":""},{"name":"Zhihu Visitor","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["*://www.zhihu.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1530109317161},"enabled":true,"position":2,"file_url":"https://tiansh.github.io/us-else/zhihu_visitor/Zhihu_Visitor.user.js","uuid":"f4179599-ddba-4228-8a72-1bc1b37e87c7","source":""},{"name":"True URL downloads","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["http://192.168.*"],"orig_includes":["http://*","https://*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-body","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1530109317176},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/7362-true-url-downloads/code/True%20URL%20downloads.user.js","uuid":"d95c36a8-d7a4-4a41-bc8d-55fbb7181e99","source":""},{"name":"Popup Blocker Script","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["https://*/*","http://*/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"dprm":"n1530108003611","sdc_data":"s{\"uid\":null,\"pid\":\"2cc483d58f9eca27b863a16b4f668d\",\"lastFocusedUrl\":null,\"q\":\"https://wx2.qq.com/\",\"hreferer\":\"https://wx2.qq.com/\",\"_active\":\"https://wx2.qq.com/\",\"prev\":\"https://greasyfork.org/zh-CN/scripts\"}"},"ts":1530109317181},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/37654-popup-blocker-script/code/Popup%20Blocker%20Script.user.js","uuid":"23146926-2e66-4303-bb6e-9fab0e9e2892","source":""},{"name":"网页限制解除","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1530109317185},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/14146-%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4/code/%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4.user.js","uuid":"742c5953-6599-4ac3-9f40-d8286495f7b7","source":""},{"name":"Picviewer CE+","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["http://www.toodledo.com/tasks/*","http*://maps.google.com*/*","*://www.google.*/_/chrome/newtab*"],"orig_includes":["http://*","https://*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1530109317194},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/24204-picviewer-ce/code/Picviewer%20CE+.user.js","uuid":"bf221459-5a1c-4e17-8f5f-4c7053d69987","source":""},{"name":"Userscript+ : Show Site All UserJS","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["http://www.dev/Show-Site-All-UserJS/ui.html"],"orig_includes":["*"],"orig_matches":[],"orig_noframes":true,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1530109317244},"enabled":true,"position":7,"file_url":"https://greasyfork.org/scripts/24508-userscript-show-site-all-userjs/code/Userscript+%20:%20Show%20Site%20All%20UserJS.user.js","uuid":"df644cd5-9d20-41a2-8503-43863a75b4f7","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBVc2Vyc2NyaXB0KyA6IFNob3cgU2l0ZSBBbGwgVXNlckpTCi8vIEBuYW1lOnpoICAgICAgVXNlcnNjcmlwdCsgOiDmmL7npLrlvZPliY3nvZHnq5nmiYDmnInlj6/nlKjnmoRVc2VySlPohJrmnKwgSmFlZ2VyCi8vIEBuYW1lOnpoLUNOICAgVXNlcnNjcmlwdCsgOiDmmL7npLrlvZPliY3nvZHnq5nmiYDmnInlj6/nlKjnmoRVc2VySlPohJrmnKwgSmFlZ2VyCi8vIEBuYW1lOnpoLVRXICAgVXNlcnNjcmlwdCsgOiDpoa/npLrnlbbliY3ntrLnq5nmiYDmnInlj6/nlKjnmoRVc2VySlPohbPmnKwgSmFlZ2VyCi8vIEBuYW1lOmphICAgVXNlcnNjcmlwdCAr77ya54++5Zyo44Gu44K144Kk44OI44Gu5Yip55So5Y+v6IO944Gq44GZ44G544Gm44GuVXNlckpT44K544Kv44Oq44OX44OI44KS6KGo56S644GZ44KLSmFlZ2VyCi8vIEBuYW1lOnJ1LVJVICAgVXNlcnNjcmlwdCsgOiDQn9C+0LrQsNC30LDRgtGMINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjNGB0LrQuNC1INGB0LrRgNC40L/RgtGLIChVc2VySlMpINC00LvRjyDRgdCw0LnRgtCwLiBKYWVnZXIKLy8gQG5hbWU6cnUgICBVc2Vyc2NyaXB0KyA6INCf0L7QutCw0LfQsNGC0Ywg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GM0YHQutC40LUg0YHQutGA0LjQv9GC0YsgKFVzZXJKUykg0LTQu9GPINGB0LDQudGC0LAuIEphZWdlcgovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9qYWUtamFlL1VzZXJzY3JpcHQtUGx1cwovLyBAdmVyc2lvbiAgICAgIDIuMy4xCi8vIEBkZXNjcmlwdGlvbiAgICAgICAgIFNob3cgY3VycmVudCBzaXRlIGFsbCBVc2VySlPvvIxUaGUgZWFzaWVyIHdheSB0byBpbnN0YWxsIFVzZXJKcyBmb3IgVGFtcGVybW9ua2V5LgovLyBAZGVzY3JpcHRpb246emggICAgICDmmL7npLrlvZPliY3nvZHnq5nnmoTmiYDmnInlj6/nlKhVc2VySlMoVGFtcGVybW9ua2V5KeiEmuacrCzkuqTmtYFRUee+pDoxMDQyNjczODMKLy8gQGRlc2NyaXB0aW9uOnpoLUNOICAg5pi+56S65b2T5YmN572R56uZ55qE5omA5pyJ5Y+v55SoVXNlckpTKFRhbXBlcm1vbmtleSnohJrmnKws5Lqk5rWBUVHnvqQ6MTA0MjY3MzgzCi8vIEBkZXNjcmlwdGlvbjp6aC1UVyAgIOmhr+ekuueVtuWJjee2suermeeahOaJgOacieWPr+eUqFVzZXJKUyhUYW1wZXJtb25rZXkp6IWz5pysLOS6pOa1gVFR576kOjEwNDI2NzM4MwovLyBAZGVzY3JpcHRpb246amEgICDnj77lnKjjga7jgrXjgqTjg4jjgafliKnnlKjlj6/og73jgarjgZnjgbnjgabjga5Vc2VySlPvvIhUYW1wZXJtb25rZXnvvInjgrnjgq/jg6rjg5fjg4jjgpLooajnpLrjgZfjgb7jgZnjgIIKLy8gQGRlc2NyaXB0aW9uOnJ1LVJVICAg0J/QvtC60LDQt9GL0LLQsNC10YIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GM0YHQutC40LUg0YHQutGA0LjQv9GC0YsgKFVzZXJKUykg0LTQu9GPINGB0LDQudGC0LAuINCb0LXQs9C60LjQuSDRgdC/0L7RgdC+0LEg0YPRgdGC0LDQvdC+0LLQuNGC0Ywg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GM0YHQutC40LUg0YHQutGA0LjQv9GC0Ysg0LTQu9GPIFRhbXBlcm1vbmtleS4KLy8gQGRlc2NyaXB0aW9uOnJ1ICAg0J/QvtC60LDQt9GL0LLQsNC10YIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GM0YHQutC40LUg0YHQutGA0LjQv9GC0YsgKFVzZXJKUykg0LTQu9GPINGB0LDQudGC0LAuINCb0LXQs9C60LjQuSDRgdC/0L7RgdC+0LEg0YPRgdGC0LDQvdC+0LLQuNGC0Ywg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GM0YHQutC40LUg0YHQutGA0LjQv9GC0Ysg0LTQu9GPIFRhbXBlcm1vbmtleS4KLy8gQGF1dGhvciAgICAgICBKYWVnZXIgPEphZWdlckNvZGVAZ21haWwuY29tPgovLyBAaWNvbiAgICAgICAgIGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQkFBQUFBUUNBWUFBQUFmOC85aEFBQUFCbUpMUjBRQS93RC9BUCtndmFlVEFBQUFDWEJJV1hNQUFBc1RBQUFMRXdFQW1wd1lBQUFBQjNSSlRVVUgzZ2dFQkNRSE0zZlhzQUFBQVZkSlJFRlVPTXVka3oycXdrQVVoYy9nb0JhR0pCZ1V0QkNaeWowSUxrcHdBVzdCd3M0eU8zQUhMaUN0RUZEOEtWUkVrb2lGeFp6WDVBMktHZk40RjA0ek1OK2NlKzVjNExNVWdEbUFOWUJucm5WK3BsQlNpK0Z3eUhxOVRnQTJMUXB2Q2lFaUFCd01CdHp2OTVSU2ZvTkVIeThEWUJ6SHJOVnFWRXI5QldLY3FORm94RjZ2eDNhN3pjMW1ZeUM3M2E0TW9nQmc3dnMreitjek81ME9XNjBXdDlzdEs1VUtwOU1wajhjanE5V3FEVEJIbmpBZHh6R1FaclBKdytIQTMxb3VsemJBV2dMb0EwQ1daVkJLSVk1anpHWXpkTHRkRTlEbGNyRk5yWTk4em9icU9BNlRKS0hXMmpnNG5VNXNOQnBGRHA2bWhWZTVyc3ZWYXNVd0RIbTlYcW0xNXUxMm8rLzdIeTBnRDhLYXRPZDV2Ti92MUZvelRWTjZua2NoeEZ1STZoc0FBSU1nNE9QeE1KQ1hkdFRiUjdKSkNNRWdDSmhsR1VseVBCNFhmdW1veklucnVweE1KcFJTUnRabEtvTllsK20vNi93RHVXQWp0UGZzUXV3QUFBQUFTVVZPUks1Q1lJST0KLy8gQGluY2x1ZGUgICAgICAgICoKLy8gQGV4Y2x1ZGUgICAgICBodHRwOi8vd3d3LmRldi9TaG93LVNpdGUtQWxsLVVzZXJKUy91aS5odG1sCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzIzNDE5LWwtanMvY29kZS9sanMuanMKLy8gQHJlcXVpcmUgICAgICBodHRwczovL2dyZWFzeWZvcmsub3JnL3NjcmlwdHMvMjM0MjAtdXNlcmpzLWJhc2UtanMvY29kZS91c2VyanMtYmFzZWpzLmpzCi8vIEByZXNvdXJjZSAgICAgdWkgICAgIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9qYWUtamFlL1Nob3ctU2l0ZS1BbGwtVXNlckpTL21hc3Rlci9kaXN0L3VpLmh0bWw/Xz0xNTI5MjA2Mzc0MDQwCi8vIEByZXNvdXJjZSAgICAgdWlKcyAgIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9qYWUtamFlL1Nob3ctU2l0ZS1BbGwtVXNlckpTL21hc3Rlci9kaXN0L3VpLmpzP189MTUyOTIwNjM3NDA0MAovLyBAcmVzb3VyY2UgICAgIGNvdW50ICBodHRwczovL2dyZWFzeWZvcmsub3JnL3NjcmlwdHMvYnktc2l0ZS5qc29uCi8vIEBncmFudCAgICAgICAgR01feG1saHR0cFJlcXVlc3QKLy8gQGdyYW50ICAgICAgICBHTV9nZXRSZXNvdXJjZVRleHQKLy8gQGdyYW50ICAgICAgICBHTV9nZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgIEdNX3NldFZhbHVlCi8vIEBncmFudCAgICAgICAgdW5zYWZlV2luZG93Ci8vIEBub2ZyYW1lcwovLyBAY29ubmVjdCAgICAgY2RuLmJvb3Rjc3MuY29tCi8vIEBjb25uZWN0ICAgICByYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tCi8vIEBjb25uZWN0ICAgICBnaXN0LmdpdGh1YnVzZXJjb250ZW50LmNvbQovLyBAY29ubmVjdCAgICAgZ3JlYXN5Zm9yay5vcmcKLy8gQHJ1bi1hdCAgICAgIGRvY3VtZW50LWVuZAovLyA9PS9Vc2VyU2NyaXB0PT0KCnVuc2FmZVdpbmRvdy5HbUFqYXggPSBHTV94bWxodHRwUmVxdWVzdDsKCihmdW5jdGlvbigpIHsKCiAgICAndXNlIHN0cmljdCc7Cgp2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKdmFyIEZldGNoVXNlcmpzID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gRmV0Y2hVc2VyanMoKSB7CiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZldGNoVXNlcmpzKTsKCiAgICAgICAgdGhpcy5ob3N0ID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLnNwbGl0KCcuJykuc3BsaWNlKC0yKS5qb2luKCcuJyk7CiAgICAgICAgdGhpcy5zaG93VGltZSA9IDEwOwogICAgICAgIHRoaXMucXVpZXRLZXkgPSAnamFlX2ZldGNoX3VzZXJqc19xdWlldCc7CiAgICAgICAgdGhpcy5jb3VudEtleSA9ICdqYWVfZmV0Y2hfdXNlcmpzX2NvdW50JzsKICAgICAgICB0aGlzLnRwbEJveCA9ICc8ZGl2IGlkPSJqYWVfdXNlcnNjcmlwdF9ib3giPjxzdHlsZT4uamFlLXVzZXJzY3JpcHR7cG9zaXRpb246Zml4ZWQ7d2lkdGg6MzcwcHg7Ym90dG9tOjEwcHg7cmlnaHQ6MjBweDt6LWluZGV4Ojk5OTk5OTk5OTk7aGVpZ2h0OjU2cHh9LmphZS11c2Vyc2NyaXB0LXNoYWRvd3tib3gtc2hhZG93OjAgMXB4IDRweCByZ2JhKDAsMCwwLC4zKSxcXHRcXHRcXHRcXHQwcHggMCAyMHB4IHJnYmEoMCwwLDAsLjEpIGluc2V0fS5qYWUtdXNlcnNjcmlwdC1zaGFkb3c6OmJlZm9yZSwuamFlLXVzZXJzY3JpcHQtc2hhZG93OjphZnRlcntjb250ZW50OiIiO3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6LTF9LmphZS11c2Vyc2NyaXB0LXNoYWRvdzo6YmVmb3JlLC5qYWUtdXNlcnNjcmlwdC1zaGFkb3c6OmFmdGVye2NvbnRlbnQ6IiI7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDotMTtib3R0b206MTVweDtsZWZ0OjEwcHg7d2lkdGg6NTAlO2hlaWdodDoyMCV9LmphZS11c2Vyc2NyaXB0LXNoYWRvdzo6YmVmb3JlLC5qYWUtdXNlcnNjcmlwdC1zaGFkb3c6OmFmdGVye2NvbnRlbnQ6IiI7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDotMTtib3R0b206MTVweDtsZWZ0OjEwcHg7d2lkdGg6NTAlO2hlaWdodDoyMCU7Ym94LXNoYWRvdzowIDE1cHggMTBweCByZ2JhKDAsMCwwLC43KTt0cmFuc2Zvcm06cm90YXRlKC0zZGVnKX0uamFlLXVzZXJzY3JpcHQtc2hhZG93OjphZnRlcntyaWdodDoxMHB4O2xlZnQ6YXV0bzt0cmFuc2Zvcm06cm90YXRlKDNkZWcpfTwvc3R5bGU+PGRpdiBjbGFzcz0iamFlLXVzZXJzY3JpcHQiIGNsYXNzPSIiPjwvZGl2PjwvZGl2Pic7CiAgICB9CgogICAgX2NyZWF0ZUNsYXNzKEZldGNoVXNlcmpzLCBbewogICAgICAgIGtleTogJ2dldENvdW50RGF0YScsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvdW50RGF0YShob3N0KSB7CiAgICAgICAgICAgIHZhciBjb3VudERhdGEgPSBHTV9nZXRSZXNvdXJjZVRleHQoJ2NvdW50Jyk7CiAgICAgICAgICAgIGNvdW50RGF0YSA9IEpTT04ucGFyc2UoY291bnREYXRhKTsKICAgICAgICAgICAgdmFyIGNvdW50ID0gY291bnREYXRhW2hvc3RdOwogICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHRoaXMuY291bnRLZXksIGNvdW50KTsKICAgICAgICAgICAgcmV0dXJuIGNvdW50OwogICAgICAgIH0KICAgIH0sIHsKICAgICAgICBrZXk6ICdzZXRTaXplJywKICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2l6ZSh3LCBoKSB7CiAgICAgICAgICAgICQoJy5qYWUtdXNlcnNjcmlwdCcpLmNzcyh7CiAgICAgICAgICAgICAgICB3aWR0aDogdywKICAgICAgICAgICAgICAgIGhlaWdodDogaAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9LCB7CiAgICAgICAga2V5OiAnYWRkRXZlbnRMaXN0ZW5lcicsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKSB7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqYWVfdXNlcnNjcmlwdF9ib3gnKS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7CiAgICAgICAgfQogICAgfSwgewogICAgICAgIGtleTogJ2JpbmRFdmVudCcsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJpbmRFdmVudCgpIHsKICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgICAgICAgIHRoaXMudGltZUlkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAkKCcjamFlX3VzZXJzY3JpcHRfYm94JykucmVtb3ZlKCk7CiAgICAgICAgICAgIH0sIHRoaXMuc2hvd1RpbWUgKiAxMDAwKTsKCiAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignbWF4JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgX3RoaXMuc2V0U2l6ZSg4NjAsIDQ5Mik7CiAgICAgICAgICAgICAgICAkKCcuamFlLXVzZXJzY3JpcHQnKS5hZGRDbGFzcygnamFlLXVzZXJzY3JpcHQtc2hhZG93Jyk7CiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZUlkKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ21pbicsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICQoJy5qYWUtdXNlcnNjcmlwdCcpLnJlbW92ZUNsYXNzKCdqYWUtdXNlcnNjcmlwdC1zaGFkb3cnKTsKICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTaXplKDM3MCwgNTYpOwogICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShfdGhpcy5xdWlldEtleSwgMSk7CiAgICAgICAgICAgICAgICAkKCcjamFlX3VzZXJzY3JpcHRfYm94JykucmVtb3ZlKCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdsb2FkaW5nJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVJZCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0sIHsKICAgICAgICBrZXk6ICdleGVjRnJhbWVKcycsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4ZWNGcmFtZUpzKGZyYW1lV2luZG93KSB7CiAgICAgICAgICAgIHZhciB1aUpzID0gR01fZ2V0UmVzb3VyY2VUZXh0KCd1aUpzJyk7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoanNTdHIpIHsKICAgICAgICAgICAgICAgIGZyYW1lV2luZG93LmV2YWwoanNTdHIpOwogICAgICAgICAgICB9LmNhbGwoZnJhbWVXaW5kb3csIHVpSnMpOwogICAgICAgIH0KICAgIH0sIHsKICAgICAgICBrZXk6ICdyZW5kZXInLAogICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgICAgICAgIGlmICghdGhpcy5pc1F1aWV0KSB7CiAgICAgICAgICAgICAgICB2YXIgY291bnQgPSB0aGlzLmdldENvdW50RGF0YSh0aGlzLmhvc3QpOwogICAgICAgICAgICAgICAgaWYgKGNvdW50KSB7CiAgICAgICAgICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZCh0aGlzLnRwbEJveCk7CgogICAgICAgICAgICAgICAgICAgIHZhciB1aSA9IEdNX2dldFJlc291cmNlVGV4dCgndWknKTsKICAgICAgICAgICAgICAgICAgICB2YXIgZG9tID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnamFlLXVzZXJzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICB2YXIgdHBsID0gJzxpZnJhbWUgbmFtZT0iamFlRmV0Y2hVc2VySlNGcmFtZSIgc3JjPSJhYm91dDpibGFuayIgc3R5bGU9IndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7Ym9yZGVyOjBweDtkaXNwbGF5OiBibG9jayFpbXBvcnRhbnQ7IiBhbGxvd1RyYW5zcGFyZW5jeT0idHJ1ZSI+PC9pZnJhbWU+JzsKICAgICAgICAgICAgICAgICAgICBkb20uaW5uZXJIVE1MID0gdHBsOwogICAgICAgICAgICAgICAgICAgIHZhciBpZnJhbWVEb20gPSBkb20uY2hpbGRyZW5bMF07CiAgICAgICAgICAgICAgICAgICAgaWZyYW1lLndyaXRlKGlmcmFtZURvbSwgdWkpOwoKICAgICAgICAgICAgICAgICAgICB0aGlzLmV4ZWNGcmFtZUpzKGphZUZldGNoVXNlckpTRnJhbWUud2luZG93KTsKCiAgICAgICAgICAgICAgICAgICAgdGhpcy5iaW5kRXZlbnQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sIHsKICAgICAgICBrZXk6ICdpc1F1aWV0JywKICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgdmFyIHF1aWV0ID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSh0aGlzLnF1aWV0S2V5KTsKICAgICAgICAgICAgcmV0dXJuIHF1aWV0ID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgIH0KICAgIH1dKTsKCiAgICByZXR1cm4gRmV0Y2hVc2VyanM7Cn0oKTsKCmxqcy5leGVjKFsnalF1ZXJ5JywgJ2lmcmFtZSddLCBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZnUgPSBuZXcgRmV0Y2hVc2VyanMoKTsKICAgIGZ1LnJlbmRlcigpOwp9KTsKCn0pKCk7"}],"settings":{"script_blacklist_server":[{"rules":["/https?:\\/\\/userscripts\\.org\\/scripts\\/(source|version)/(102614).*\\.user\\.js/"],"severity":"2"},{"name":"SaveFrom.net helper","reason":"Shows advertisements","rules":["/https?:\\/\\/sf-addon\\.com\\/.*\\/.*\\.user\\.js/","/https?:\\/\\/.*\\.sf-helper\\.com\\/.*\\.user\\.js/"],"severity":"3"}]}}